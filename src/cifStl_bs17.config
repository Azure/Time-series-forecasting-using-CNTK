# Training/validation CNTK script, BrainScript (1.7) version
# Slawek Smyl, Feb-Sep 2016


RootDir = "." 
DataDir = $RootDir$/data
inputFile=$DataDir$/stl_12i15.txt #here we are dealing with majority of time series with 12-months ahead prediction horizon
validFile=$DataDir$/stl_12i15v.txt
labelDim=12
inputDim=15
stateDim=50 # not too sensitive, e.g. 25 or 80 would also work

OutputDir = "$RootDir$/Output/stl_12i15_50"
ModelDir = "$OutputDir$"
outputPath = "$OutputDir$/Out" 
precision = "float"
traceLevel = 0
modelPath = "$ModelDir$/cif12.dnn" # final model
  
# deviceId=-1 for CPU, >=0 for GPU devices, "auto" chooses the best GPU, or CPU if no usable GPU is available
deviceId = "auto"

command = nn_Train:nn_Write


nn_Train = {
  action = train

  BrainScriptNetworkBuilder = {
    model = Sequential (
      RecurrentLSTMLayer {$stateDim$, usePeepholes = true} : #first LSTM
      DenseLayer {$labelDim$, bias=false}                    # followed by an adaptor layer (from LSTN output size to the output or label size)
    )
    z = model (inputs)
    
    inputs=Input($inputDim$)  # features
    labels=Input($labelDim$)
    
    # loss and metric
    ce = SquareError(labels, z)
   
    # node assignment
    featureNodes    = (inputs)
    labelNodes      = (labels)
    criterionNodes  = (ce)
    evaluationNodes = (ce)
    outputNodes     = (z)
  }

  SGD = {
    epochSize = 10000  # epochSize = 0 means epochSize is the size of the training set. Here, each epoch goes around 3 times through the data set.
    minibatchSize = 128
    learningRatesPerSample = 0.02*3:0.01
    momentumAsTimeConstant = 1200 # momentumAsTimeConstant = -minibatchSize / ln (momentumPerMB) 
    maxEpochs = 20
    gaussianNoiseInjectStd=0.0005
  }
       
  # Parameter values for the reader
  reader = {
    readerType = "CNTKTextFormatReader"
    file = $inputFile$
    randomize = true
    traceLevel = 1
        
    input = {
	    inputs = {
		    alias = "i"; dim = $inputDim$; format = "dense"
	    }
	    labels = {
		    alias = "o"; dim = $labelDim$; format = "dense"
	    }     
	  }
  }
}



# This action outputs node z (as per line: outputNodes     = (z), above)
nn_Write = {
  action = "write"
  minibatchSize =1000
  reader = {
    readerType = "CNTKTextFormatReader"
    file = $validFile$
    randomize = false # do not randomize here, because we want to match the output produced here withthe validation file
    traceLevel = 1
        
    input = {
      inputs = {
        alias = "i"; dim = $inputDim$; format = "dense"
      }
      labels = {
        alias = "o"; dim = $labelDim$; format = "dense"
      }     
    }
  }
}
   
